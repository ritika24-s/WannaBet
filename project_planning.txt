# Project Plan

## Day 1: Project Setup and Basic Entities

### Objectives:
1. Set up the project structure.
2. Implement basic CRUD operations for sports.

### Tasks:
- Initialize a Flask project.
- Set up MySQL database connection.
- Create the database schema for sports, events, and selections.
- Implement models for sports, events, and selections.
- Implement the `/sport` POST endpoint to create a new sport.
- Implement the `/sport/{sport_id}` PATCH endpoint to update a sport.
- Implement basic error handling and logging.

### Deliverables:
- Project repository initialized with basic Flask setup.
- Models and migrations for sports.
- Basic CRUD operations for sports.
- Documentation on project setup and configuration.

## Day 2: Event and Selection Endpoints

### Objectives:
1. Implement CRUD operations for events.
2. Implement CRUD operations for selections.

### Tasks:
- Implement the `/event` POST endpoint to create a new event.
- Implement the `/event/{event_id}` PATCH endpoint to update an event.
- Implement the `/selection` POST endpoint to create a new selection.
- Implement the `/selection/{selection_id}` PATCH endpoint to update a selection.
- Ensure validations.

### Deliverables:
- CRUD operations for events and selections.
- Validations.

## Day 3: Search and Slug Generation

### Objectives:
1. Implement search functionality.
2. Implement slug generation for sports and events.

### Tasks:
- Implement the `/sport/search` POST endpoint to search for sports.
- Implement the `/event/search` POST endpoint to search for events.
- Implement the `/selection/search` POST endpoint to search for selections.
- Implement a utility function for generating URL-friendly slugs.
- Integrate slug generation into the creation and update endpoints for sports and events.

### Deliverables:
- Search functionality for sports, events, and selections.
- Slug generation and integration.

## Day 4: Third-Party API Integration and Active Status

### Objectives:
1. Integrate with the third-party API for fetching team logos.
2. Check if sport and event active status should be updated

### Tasks:
- Implement a service to fetch team logos from `thesportsdb.com`.
- Update the event creation process to fetch and store logos.
- Check if all selections are inactive then set event to inactive
- Check if all events are inactive then set sport to inactive

### Deliverables:
- Third-party API integration for fetching team logos.
- Route, view and model implementation for check_and_update_active_status

## Day 5: Testing, Docker Setup, and Documentation

### Objectives:
1. Ensure high test coverage.
2. Set up Docker and Docker Compose.
3. Finalize documentation.

### Tasks:
- Write unit tests for all endpoints using Pytest.
- Achieve at least 90% test coverage.
- Set up Docker and Docker Compose for the application.
- Write comprehensive documentation on API usage, deployment, and environment setup.
- Prepare for staging and production configurations.

### Deliverables:
- Comprehensive pytes tests cases with 90% coverage.
- Docker and Docker Compose setup.
- Final documentation.